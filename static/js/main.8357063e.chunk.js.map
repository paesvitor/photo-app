{"version":3,"sources":["store/modules/album/types.ts","store/modules/album/reducer/list.ts","store/modules/album/reducer/show.ts","store/modules/album/reducer/index.ts","store/rootReducer.ts","services/api.ts","store/modules/album/actions.ts","store/modules/album/sagas.ts","store/rootSagas.ts","store/index.ts","components/album/AlbumListCard/styles.ts","components/album/AlbumListCard/index.tsx","components/album/AlbumList/index.tsx","screens/Albums/index.tsx","components/photo/PhotoLightbox/index.tsx","components/photo/PhotoList/index.tsx","screens/Album/index.tsx","router/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AlbumTypes","LIST","REQUEST","FAILURE","SUCCESS","SHOW","INITIAL_STATE","data","error","loading","reducer","state","action","type","payload","album","id","title","photos","combineReducers","list","show","axios","create","baseURL","albumActions","request","success","failure","root","call","api","get","response","put","takeLatest","rootSaga","all","albumSagas","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","logger","createLogger","sagaMiddleware","createSagaMiddleware","middlewares","enhancer","applyMiddleware","store","createStore","rootReducer","run","sagas","useStyles","makeStyles","height","link","textDecoration","AlbumListCard","props","classes","to","className","Card","CardContent","Typography","align","AlbumList","albumList","useSelector","dispatch","useDispatch","useEffect","LinearProgress","Grid","container","spacing","map","item","xs","sm","md","key","AlbumsScreen","Container","Box","my","variant","PhotoLightbox","isOpen","photoUrl","handleClose","Dialog","open","onClose","DialogTitle","IconButton","aria-label","onClick","src","PhotoList","useState","lightboxIsOpen","setLightboxIsOpen","selectedPhoto","setSelectedPhoto","GridList","cellHeight","cols","photo","GridListTile","url","alt","GridListTileBar","AlbumScreen","params","useParams","albumShow","Router","basename","process","exact","path","component","App","CssBaseline","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.8357063e.chunk.js","sourcesContent":["import { Photo } from \"../photo/types\";\n\nconst entity = \"Album\";\n\n// Actions\nexport const AlbumTypes = {\n  LIST: {\n    REQUEST: `@${entity}/list/REQUEST`,\n    FAILURE: `@${entity}/list/FAILURE`,\n    SUCCESS: `@${entity}/list/SUCCESS`\n  },\n  SHOW: {\n    REQUEST: `@${entity}/show/REQUEST`,\n    FAILURE: `@${entity}/show/FAILURE`,\n    SUCCESS: `@${entity}/show/SUCCESS`\n  }\n};\n\n// Data\nexport interface Album {\n  id: number;\n  title: string;\n}\n\n// States\nexport interface AlbumListState {\n  readonly data: Album[];\n  readonly loading: boolean;\n  readonly error: boolean;\n}\n\nexport interface AlbumShowState {\n  readonly data: {\n    album: Album;\n    photos: Photo[];\n  };\n  readonly loading: boolean;\n  readonly error: boolean;\n}\n\n// Root State\nexport interface AlbumRootState {\n  list: AlbumListState;\n  show: AlbumShowState;\n}\n","import { AlbumListState, AlbumTypes } from \"../types\";\nimport { Reducer } from \"redux\";\n\nconst INITIAL_STATE = {\n  data: [],\n  error: false,\n  loading: false\n};\n\nconst reducer: Reducer<AlbumListState> = (\n  state = INITIAL_STATE,\n  action: any\n) => {\n  switch (action.type) {\n    case AlbumTypes.LIST.REQUEST:\n      return {\n        ...state,\n        loading: true\n      };\n    case AlbumTypes.LIST.FAILURE:\n      return {\n        ...state,\n        error: true,\n        loading: false\n      };\n    case AlbumTypes.LIST.SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        data: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { AlbumTypes, AlbumShowState } from \"../types\";\nimport { Reducer } from \"redux\";\n\nconst INITIAL_STATE: AlbumShowState = {\n  data: {\n    album: {\n      id: 0,\n      title: \"\"\n    },\n    photos: []\n  },\n  error: false,\n  loading: false\n};\n\nconst reducer: Reducer<AlbumShowState> = (\n  state = INITIAL_STATE,\n  action: any\n) => {\n  switch (action.type) {\n    case AlbumTypes.SHOW.REQUEST:\n      return {\n        ...state,\n        loading: true\n      };\n    case AlbumTypes.SHOW.FAILURE:\n      return {\n        ...state,\n        error: true,\n        loading: false\n      };\n    case AlbumTypes.SHOW.SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        data: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from \"redux\";\n\nimport list from \"./list\";\nimport show from \"./show\";\n\nexport default combineReducers({\n  list,\n  show\n});\n","import { combineReducers } from \"redux\";\n\nimport album from \"./modules/album/reducer\";\n\nexport default combineReducers({\n  album\n});\n","import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"https://jsonplaceholder.typicode.com/\"\n});\n","import { action } from \"typesafe-actions\";\nimport { AlbumTypes, Album } from \"./types\";\nimport { Photo } from \"../photo/types\";\n\nexport const albumActions = {\n  list: {\n    request: () => action(AlbumTypes.LIST.REQUEST),\n    success: (payload: Album[]) => action(AlbumTypes.LIST.SUCCESS, payload),\n    failure: () => action(AlbumTypes.LIST.FAILURE)\n  },\n\n  show: {\n    request: (id: string) => action(AlbumTypes.SHOW.REQUEST, id),\n    success: (photos: Photo[], album: Album) =>\n      action(AlbumTypes.SHOW.SUCCESS, { photos, album }),\n    failure: () => action(AlbumTypes.SHOW.FAILURE)\n  }\n};\n","import { call, put, takeLatest } from \"redux-saga/effects\";\nimport api from \"services/api\";\nimport { albumActions } from \"./actions\";\nimport { AlbumTypes } from \"./types\";\n\nfunction* list() {\n  try {\n    const response = yield call(api.get, \"/albums\");\n\n    yield put(albumActions.list.success(response.data));\n  } catch (error) {\n    yield put(albumActions.list.failure());\n  }\n}\n\nfunction* show(action: any) {\n  try {\n    const album = yield call(api.get, `/albums/${action.payload}`);\n    const photos = yield call(api.get, `/albums/${action.payload}/photos`);\n\n    yield put(albumActions.show.success(photos.data, album.data));\n  } catch (error) {\n    yield put(albumActions.list.failure());\n  }\n}\n\nexport default function* root() {\n  yield takeLatest(AlbumTypes.LIST.REQUEST, list);\n  yield takeLatest(AlbumTypes.SHOW.REQUEST, show);\n}\n","import { all } from \"redux-saga/effects\";\n\nimport albumSagas from \"./modules/album/sagas\";\n\nexport default function* rootSaga() {\n  yield all([albumSagas()]);\n}\n","import { createStore, Store, compose, applyMiddleware } from \"redux\";\nimport { AlbumRootState } from \"./modules/album/types\";\nimport { createLogger } from \"redux-logger\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootReducer from \"./rootReducer\";\nimport sagas from \"./rootSagas\";\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n  }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport interface ApplicationState {\n  album: AlbumRootState;\n}\n\nconst logger = createLogger({});\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [logger, sagaMiddleware];\n\nconst enhancer = composeEnhancers(applyMiddleware(...middlewares));\n\nconst store: Store<ApplicationState> = createStore(rootReducer, enhancer);\n\nsagaMiddleware.run(sagas);\n\nexport default store;\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles({\n  root: {\n    height: \"100%\"\n  },\n\n  link: {\n    textDecoration: \"none\"\n  }\n});\n","import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { useStyles } from \"./styles\";\nimport { Link } from \"react-router-dom\";\nimport { Album } from \"store/modules/album/types\";\n\ninterface Props {\n  album: Album;\n}\n\nfunction AlbumListCard(props: Props) {\n  const {\n    album: { title, id }\n  } = props;\n  const classes = useStyles();\n\n  return (\n    <Link to={`/album/${id}`} className={classes.link}>\n      <Card className={classes.root}>\n        <CardContent>\n          <Typography align=\"center\">{title}</Typography>\n        </CardContent>\n      </Card>\n    </Link>\n  );\n}\n\nexport default AlbumListCard;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Grid from \"@material-ui/core/Grid\";\n\nimport { albumActions } from \"store/modules/album/actions\";\nimport { ApplicationState } from \"store\";\nimport { Album } from \"store/modules/album/types\";\nimport AlbumListCard from \"../AlbumListCard\";\n\nfunction AlbumList() {\n  const albumList = useSelector((state: ApplicationState) => state.album.list);\n  const dispatch = useDispatch();\n\n  function handleAlbumListRequest() {\n    dispatch(albumActions.list.request());\n  }\n\n  useEffect(() => {\n    handleAlbumListRequest();\n  }, []);\n\n  if (albumList.loading) {\n    return <LinearProgress />;\n  }\n\n  return (\n    <Grid container spacing={3}>\n      {albumList.data.map((album: Album) => (\n        <Grid item xs={12} sm={6} md={4} key={album.id}>\n          <AlbumListCard album={album} />\n        </Grid>\n      ))}\n    </Grid>\n  );\n}\n\nexport default AlbumList;\n","import React from \"react\";\nimport AlbumList from \"components/album/AlbumList\";\nimport { Typography, Box, Container } from \"@material-ui/core\";\n\nfunction AlbumsScreen() {\n  return (\n    <Container>\n      <Box my={10}>\n        <Typography variant=\"h1\" align=\"center\">\n          Albums\n        </Typography>\n      </Box>\n      <AlbumList />\n    </Container>\n  );\n}\n\nexport default AlbumsScreen;\n","import React from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  Typography\n} from \"@material-ui/core\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\ninterface Props {\n  photoUrl: string;\n  isOpen: boolean;\n  handleClose: () => void;\n}\n\nfunction PhotoLightbox(props: Props) {\n  const { isOpen, photoUrl, handleClose } = props;\n\n  return (\n    <Dialog open={isOpen} onClose={handleClose}>\n      <DialogTitle id=\"customized-dialog-title\">\n        <IconButton aria-label=\"close\" onClick={handleClose}>\n          <CloseIcon />\n        </IconButton>\n      </DialogTitle>\n      <img src={photoUrl} title={photoUrl} />\n    </Dialog>\n  );\n}\n\nexport default PhotoLightbox;\n","import React, { useState } from \"react\";\nimport GridList from \"@material-ui/core/GridList\";\nimport GridListTile from \"@material-ui/core/GridListTile\";\nimport GridListTileBar from \"@material-ui/core/GridListTileBar\";\nimport { Photo } from \"store/modules/photo/types\";\nimport PhotoLightbox from \"components/photo/PhotoLightbox\";\n\ninterface Props {\n  photos: Photo[];\n}\n\nfunction PhotoList(props: Props) {\n  const { photos } = props;\n  const [lightboxIsOpen, setLightboxIsOpen] = useState(false);\n  const [selectedPhoto, setSelectedPhoto] = useState(\"\");\n\n  function handleSelectPhoto(photoUrl: string) {\n    setSelectedPhoto(photoUrl);\n    setLightboxIsOpen(true);\n  }\n\n  function handleCloseLightbox() {\n    setLightboxIsOpen(false);\n  }\n\n  return (\n    <>\n      <PhotoLightbox\n        isOpen={lightboxIsOpen}\n        photoUrl={selectedPhoto}\n        handleClose={handleCloseLightbox}\n      />\n      <GridList cellHeight={300} cols={3}>\n        {photos.map(photo => (\n          <GridListTile key={photo.id} cols={1}>\n            <img\n              src={photo.url}\n              alt={photo.title}\n              onClick={() => handleSelectPhoto(photo.url)}\n            />\n            <GridListTileBar title={photo.title} />\n          </GridListTile>\n        ))}\n      </GridList>\n    </>\n  );\n}\n\nexport default PhotoList;\n","import React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { albumActions } from \"store/modules/album/actions\";\nimport PhotoList from \"components/photo/PhotoList\";\nimport { ApplicationState } from \"store\";\nimport { LinearProgress, Box, Typography, Container } from \"@material-ui/core\";\n\ninterface RouteParams {\n  id: string;\n}\n\nfunction AlbumScreen() {\n  const params = useParams<RouteParams>();\n  const dispatch = useDispatch();\n  const albumShow = useSelector((state: ApplicationState) => state.album.show);\n\n  function handleAlbumShowRequest() {\n    dispatch(albumActions.show.request(params.id));\n  }\n\n  useEffect(() => {\n    handleAlbumShowRequest();\n  }, []);\n\n  if (albumShow.loading) {\n    return <LinearProgress />;\n  }\n\n  return (\n    <Container>\n      <Box my={10}>\n        <Typography align=\"center\" variant=\"h1\">\n          {albumShow.data.album.title}\n        </Typography>\n      </Box>\n\n      <PhotoList photos={albumShow.data.photos} />\n    </Container>\n  );\n}\n\nexport default AlbumScreen;\n","import React from \"react\";\nimport { Route, Switch, HashRouter } from \"react-router-dom\";\nimport AlbumsScreen from \"screens/Albums\";\nimport AlbumScreen from \"screens/Album\";\n\n// Components\nfunction Router() {\n  return (\n    <HashRouter basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route exact path=\"/\" component={AlbumsScreen} />\n        <Route exact path=\"/album/:id\" component={AlbumScreen} />\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default Router;\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport Router from \"./router\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <CssBaseline />\n      <Router />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}